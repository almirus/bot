package com.almirus.kvartalyBot.service;

import com.almirus.kvartalyBot.dal.entity.Apartment;
import com.almirus.kvartalyBot.dal.entity.Owner;
import com.almirus.kvartalyBot.dal.entity.TempOwner;
import com.almirus.kvartalyBot.util.Permission;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.info.BuildProperties;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.groupadministration.*;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.ChatInviteLink;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.OptionalInt;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.joining;

@EqualsAndHashCode(callSuper = true)
@Component
@Data
@Slf4j
public class TelegramBotHandler extends TelegramLongPollingBot {

    @Autowired
    BuildProperties buildProperties;

    private final String INFO_LABEL = "ü§ñ –û –±–æ—Ç–µ";
    private final String ACCESS_LABEL = "üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø";
    private final String ABOUT_BUILDING_LABEL = "üè¢ –û –¥–æ–º–µ";
    private final String ABOUT_ROOM_LABEL = "üè† –û –∫–≤–∞—Ä—Ç–∏—Ä–µ";
    private final String BOT_LABEL = "–ß–µ–≥–æ –Ω–æ–≤–æ–≥–æ";
    private final String START_LABEL = "üè° –í –Ω–∞—á–∞–ª–æ";
    private final String BEGIN_LABEL = "–°–æ–≥–ª–∞—Å–µ–Ω‚úÖ, –Ω–∞—á–∞—Ç—å ";
    private final String SEND_TO_ADMIN_LABEL = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
    private final String SEND_TO_ADMIN_CANCEL_LABEL = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É";
    private final String FIND_LABEL = "üîé –ù–∞–π—Ç–∏ —Å–æ—Å–µ–¥–µ–π";
    private final String ABOUT_2119_LABEL = "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è 21/19";
    private final String FIND_NEIGHBOR2_LABEL = "üë®üë©2—Ö –±–ª–∏–∂–∞–π—à–∏—Ö";
    private final String FIND_FLOOR_NEIGHBOR_LABEL = "üë®üë©–ù–∞ —ç—Ç–∞–∂–µ";
    private final String FIND_ENTRANCE_NEIGHBOR_LABEL = "üë®üë©–ü–æ —Å—Ç–æ—è–∫—É";
    // todo –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–≤–µ—Ä—Ö –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

    // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü
    private final TempOwnerService tempOwnerService;
    // —Ä–µ–∞–ª—å–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü
    private final OwnerService ownerService;

    private final ApartmentService apartmentService;


    private enum COMMANDS {
        ADD_USER("/add"),
        REMOVE_USER("/remove_user"),
        BAN("/ban"),

        INFO("/info"),
        START("/start"),
        DEMO("/demo"),
        ACCESS("/access"),
        SUCCESS("/success"),
        ABOUT_ROOM("/about"),
        ABOUT_BUILDING("/about_building"),
        BOT("/bot"),
        BEGIN("/begin"),
        SEND("/send_to_admin"),
        DELETE("/delete"),
        CAR_EXIST("/car_exist"),
        CAR_NOT_EXIST("/car_not_exist"),
        PHONE_EXIST("/phone_exist"),
        PHONE_NOT_EXIST("/phone_not_exist"),
        FIND_NEIGHBORS("/find_neighbors"),
        FIND_2NEIGHBORS("/find_two_neighbors"),
        FIND_FLOOR_NEIGHBORS("/find_floor_neighbors"),
        FIND_ENTRANCE_NEIGHBORS("/find_entrance_neighbors"),
        WHO_IS("/whois");


        private final String command;

        COMMANDS(String command) {
            this.command = command;
        }

        public String getCommand() {
            return command;
        }
    }

    @Value("${telegram.support.chat-id}")
    private String supportChatId;

    @Value("${telegram.name}")
    private String name;

    @Value("${telegram.token}")
    private String token;

    @Value("${telegram.chanel-id}")
    private String privateChannelId;

    @Override
    public String getBotUsername() {
        return name;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    public void onUpdateReceived(Update update) {
        //!update.getMessage().getChatId().equals(Long.parseLong(privateChannelId)) - –≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ, –Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if (update.hasMessage() && !update.getMessage().getChatId().equals(Long.parseLong(privateChannelId)) && (update.getMessage().hasText() || update.getMessage().hasContact())) { //—Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç –±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            // –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Text) –±–æ—Ç—É, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (Reply), —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Contact)
            String text = update.getMessage().hasText() ? update.getMessage().getText() : "";
            String reply = update.getMessage().getReplyToMessage() != null ? update.getMessage().getReplyToMessage().getText() : "";
            String phone = update.getMessage().hasContact() ? update.getMessage().getContact().getPhoneNumber() : "";
            long telegramUserId = update.getMessage().getChatId();

            try {
                //todo –ù—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥!
                Pattern patternFloor = Pattern.compile("^—ç—Ç–∞–∂$");
                Pattern patternRoom = Pattern.compile("^–∫–≤–∞—Ä—Ç–∏—Ä–∞$");
                Pattern patternName = Pattern.compile("^–∏–º—è$");
                Pattern patternPhone = Pattern.compile("^—Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É) ‚¨áÔ∏è$");
                Pattern patternCar = Pattern.compile("^–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞$");
                //–µ—Å–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –≤–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä—É–∫–∞–º–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
                Pattern patternCustomPhone = Pattern.compile("^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$");

                Matcher matcherFloor = patternFloor.matcher(reply);
                Matcher matcherRoom = patternRoom.matcher(reply);
                Matcher matcherName = patternName.matcher(reply);
                Matcher matcherPhone = patternPhone.matcher(reply);
                Matcher matcherCar = patternCar.matcher(reply);
                // –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ä—É–∫–∞–º–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç, –∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                Matcher matcherCustomPhone = patternCustomPhone.matcher(text);
                if (matcherFloor.find()) {
                    sendFloorInfo(Integer.parseInt(text), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessRoomCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherRoom.find()) {
                    sendRoomInfo(Integer.parseInt(text), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessNameCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherName.find()) {
                    sendNameInfo(!"".equals(text) ? text : update.getMessage().getFrom().getUserName(), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessPhoneExistCommand(String.valueOf(telegramUserId));
                    //SendMessage message = handleAccessPhoneCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherPhone.find() || !"".equals(phone) || matcherCustomPhone.find()) { // —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç —É—Ö–æ–¥–∏—Ç –±–µ–∑ reply —Ç–µ–∫—Å—Ç–∞
                    sendPhoneInfo(!"".equals(phone) ? phone : matcherCustomPhone.group(0), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessCarExistCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherCar.find()) {
                    sendCarPlaceInfo(text, String.valueOf(telegramUserId));
                    SendMessage message = handleSuccessCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else {
                    SendMessage message = getCommandResponse(text, String.valueOf(telegramUserId), String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                }
            } catch (TelegramApiException e) {
                e.printStackTrace();
                try {
                    sendDebugToSupport("Error " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            } catch (NumberFormatException e) {
                try {
                    // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
                    SendMessage message = handleAccessFloorCommand(String.valueOf(telegramUserId));
                    execute(message);
                    sendDebugToSupport("Error " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
        } else if (update.hasCallbackQuery() && !update.getCallbackQuery().getMessage().getChatId().equals(Long.parseLong(privateChannelId))) {
            // –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ CallbackQuery
            try {
                Pattern commandPattern = Pattern.compile("(/[a-z_]+)/?(\\d+)?");
                Matcher matcherCommand = commandPattern.matcher(update.getCallbackQuery().getData());
                if (matcherCommand.find()) {
                    SendMessage message = getCommandResponse(matcherCommand.group(1), matcherCommand.group(2), String.valueOf(update.getCallbackQuery().getMessage().getChatId()));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(update.getCallbackQuery().getMessage().getChatId()));
                    execute(message);
                }
            } catch (TelegramApiException e) {
                e.printStackTrace();
                try {
                    sendDebugToSupport("Error " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    // todo –ù—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    private void sendFloorInfo(Integer floor, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setFloor(floor);
        tempOwnerService.add(tmpOwner);

    }

    private void sendRoomInfo(Integer room, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setRealNum(room);
        tempOwnerService.add(tmpOwner);
    }

    private void sendNameInfo(String name, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setName(name);
        tempOwnerService.add(tmpOwner);
    }

    private void sendPhoneInfo(String phone, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        if (!"".equals(phone)) {
            // —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ
            phone = phone.replaceAll("[^0-9]", "");
            // –∑–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
            if (phone.charAt(0) == '8') phone = "7" + phone.substring(1);
            tmpOwner.setPhoneNum("+" + phone);
        } else {
            tmpOwner.setPhoneNum("");
        }
        tempOwnerService.add(tmpOwner);
    }

    private void sendCarPlaceInfo(String carPlace, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setCarPlace(carPlace);
        tempOwnerService.add(tmpOwner);
    }


    private void sendRequestToSupport(String message, String userId, boolean addFlag) throws TelegramApiException {
        InlineKeyboardButton inlineKeyboardButtonApprove = new InlineKeyboardButton();
        inlineKeyboardButtonApprove.setText("‚úÖ –î–æ–±–∞–≤–∏—Ç—å");
        inlineKeyboardButtonApprove.setCallbackData(COMMANDS.ADD_USER.getCommand() + "/" + userId);

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText("üö´ –û—Ç–∫–∞–∑–∞—Ç—å");
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.REMOVE_USER.getCommand() + "/" + userId);

        InlineKeyboardButton inlineKeyboardButtonBan = new InlineKeyboardButton();
        inlineKeyboardButtonBan.setText("üëä –ó–∞–±–∞–Ω–∏—Ç—å");
        inlineKeyboardButtonBan.setCallbackData(COMMANDS.BAN.getCommand() + "/" + userId);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        // –Ω—É–∂–Ω—ã –∫–Ω–æ–ø–∫–∏?
        if (addFlag) {
            keyboardButtonsRow1.add(inlineKeyboardButtonApprove);
            keyboardButtonsRow1.add(inlineKeyboardButtonCancel);
            keyboardButtonsRow1.add(inlineKeyboardButtonBan);
        }
        ;

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);
        sendInfoToSupportAdmins(message, inlineKeyboardMarkup);
    }

    private void sendInfoToUser(String telegramId, String message, InlineKeyboardMarkup inlineKeyboardMarkup) throws TelegramApiException {
        SendMessage messageForUser = new SendMessage();
        messageForUser.setText(message);
        messageForUser.setChatId(telegramId);
        if (inlineKeyboardMarkup != null) messageForUser.setReplyMarkup(inlineKeyboardMarkup);
        messageForUser.enableHtml(true);
        execute(messageForUser);
    }

    private void sendInfoToSupportAdmins(String message, InlineKeyboardMarkup inlineKeyboardMarkup) throws TelegramApiException {
        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞
        getChatAdministrators(privateChannelId).forEach(user -> {
            try {
                sendInfoToUser(String.valueOf(user.getUser().getId()), message, inlineKeyboardMarkup);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        });
    }

    private void sendDebugToSupport(String message) throws TelegramApiException {
        sendInfoToUser(supportChatId, message, null);
    }

    /***
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É, –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
     * @param text - —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     * @param userId - –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π "–ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–æ–ø–∫–µ", –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Å–ª—ç—à–∞ (/command/userId) —Å–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é commandPattern –≤ {@link #onUpdateReceived(Update) onUpdateReceived}
     * @param telegramUserId - –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –±–æ—Ç–æ–º
     * @return
     * @throws TelegramApiException
     */
    private SendMessage getCommandResponse(String text, String userId, String telegramUserId) throws TelegramApiException {

        if (text.equals(COMMANDS.INFO.getCommand())) {
            return handleInfoCommand();
        }

        if (text.equals(COMMANDS.ACCESS.getCommand())) {
            return handleAccessCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.START.getCommand())) {
            return handleStartCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.ABOUT_ROOM.getCommand())) {
            return handleAboutRoomCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.ABOUT_BUILDING.getCommand())) {
            return handleAboutBuildingCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.BOT.getCommand())) {
            return handleBotCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.BEGIN.getCommand())) {
            return handleAccessFloorCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.SEND.getCommand())) {
            return handleSendToAdminCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.DELETE.getCommand())) {
            return handleDeleteDataCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.CAR_NOT_EXIST.getCommand())) {
            sendCarPlaceInfo("–ù–µ—Ç", String.valueOf(telegramUserId));
            return handleSuccessCommand(String.valueOf(telegramUserId));
        }
        if (text.equals(COMMANDS.CAR_EXIST.getCommand())) {
            return handleAccessCarCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.PHONE_NOT_EXIST.getCommand())) {
            sendPhoneInfo("", String.valueOf(telegramUserId));
            return handleAccessCarExistCommand(String.valueOf(telegramUserId));
        }
        if (text.equals(COMMANDS.PHONE_EXIST.getCommand())) {
            return handleAccessPhoneCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.ADD_USER.getCommand())) {
            return handleAccessAddCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.BAN.getCommand())) {
            return handleAccessBanCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.FIND_NEIGHBORS.getCommand())) {
            return handleAccessFindNeighborsCommand(userId, telegramUserId);
        }

        if (text.equals(COMMANDS.FIND_2NEIGHBORS.getCommand())) {
            return handleAccessFind2NeighborsCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.FIND_FLOOR_NEIGHBORS.getCommand())) {
            return handleAccessFindFloorNeighborsCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.FIND_ENTRANCE_NEIGHBORS.getCommand())) {
            return handleAccessFindEntranceNeighborsCommand(userId, telegramUserId);
        }
        if (text.equals(COMMANDS.REMOVE_USER.getCommand())) {
            return handleAccessRemoveUserCommand(userId, telegramUserId);
        }
        return handleNotFoundCommand(telegramUserId);
    }

    private SendMessage handleNotFoundCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setText("–í—ã —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:");
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private String getChatInviteLink() throws TelegramApiException {
        CreateChatInviteLink createChatInviteLink = new CreateChatInviteLink();
        createChatInviteLink.setChatId(privateChannelId);
        createChatInviteLink.setMemberLimit(1);
        ChatInviteLink chatInviteLink = execute(createChatInviteLink);
        return chatInviteLink.getInviteLink();
    }

    private SendMessage handleAboutRoomCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();

        if (ownerService.isUserExist(telegramUserId)) {

            Owner user = ownerService.getUser(telegramUserId);
            String userStr = String.format("""
                    üë§   –õ–æ–≥–∏–Ω/–ò–º—è: <b>%s</b>
                    ‚òé   –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b><a href="tel:%s">%s</a></b>
                    """, user.getName(), user.getPhoneNum(), user.getPhoneNum());

            String apartStr = user.getApartmentList().stream().map(item -> String.format("""
                    –ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: <b>%s</b>
                    –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: <b>%s</b>
                    –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: <b>%s</b>, –ø–æ –î–î–£: <b>%s</b>
                    –ö–æ–º–Ω–∞—Ç: <b>%s</b>
                    –ü–ª–æ—â–∞–¥—å –ø–æ –ë–¢–ò: <b>%s</b>, —Ä–∞–∑–Ω–∏—Ü–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º: <b>%s–º2</b>
                    """, item.getEntrance(), item.getFloor(), item.getId(), item.getDduNum(), item.getRoom(), item.getRealArea(), item.getDifference())).collect(joining("\n"));

            message.setText(userStr + apartStr);

        } else {
            message.setText("–Ø –≤–∞—Å –Ω–µ –Ω–∞—à–µ–ª, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø");
        }
        message.enableHtml(true);
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));

        return message;
    }

    private SendMessage handleAboutBuildingCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        String info = """
                –ù–∞—à –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É <a href="https://yandex.ru/maps/-/CCUujETt~B">109518, 2-–π –ì—Ä–∞–π–≤–æ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä-–¥. –¥44.–∫.2</a>
                –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è <a href="https://2119.ru/about/docs/">—Ç—É—Ç</a>
                –î–æ–º –∏–º–µ–µ—Ç 11 –ø–æ–¥—ä–µ–∑–¥–æ–≤, –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è, —ç—Ç–æ –æ–¥–∏–Ω –¥–æ–º –∏ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å.
                 """;
        message.setText(info);
        message.enableHtml(true);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> keyboardButtons = getDefaultKeyboard(telegramUserId).getKeyboard();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButtonRoom = new InlineKeyboardButton();
        inlineKeyboardButtonRoom.setText(ABOUT_ROOM_LABEL);
        inlineKeyboardButtonRoom.setCallbackData(COMMANDS.ABOUT_ROOM.getCommand());
        keyboardButtonsRow1.add(inlineKeyboardButtonRoom);
        keyboardButtons.add(keyboardButtonsRow1);
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);
        message.setReplyMarkup(inlineKeyboardMarkup);

        return message;
    }

    private SendMessage handleBotCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setText("""
                ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –ø–æ –∫–≤–∞—Ä—Ç–∞–ª—É 21/19
                ‚ú® –ë–æ—Ç –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å —Å–æ—Å–µ–¥–µ–π
                ‚ú® –ë–æ—Ç —É–º–µ–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                ‚ú® –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞
                ‚ú® –ü—Ä–∏–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫
                """);
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private SendMessage handleStartCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setText("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private SendMessage handleInfoCommand() {
        SendMessage message = new SendMessage();
        message.setText(String.format("""
                –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏—Ö —Å–æ—Å–µ–¥–µ–π –ø–æ —ç—Ç–∞–∂—É –∏ —Å—Ç–æ—è–∫—É, –∞ —Ç–∞–∫–∂–µ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É.
                –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è!
                –í–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è, –¥–æ–Ω–∞—Ç—ã ü•Ø @<a href="tg://user?id=153968771">Almirus</a>
                –í–µ—Ä—Å–∏—è –æ—Ç %s
                """, buildProperties.getTime()));
        message.enableHtml(true);
        InlineKeyboardButton inlineKeyboardButtonBot = new InlineKeyboardButton();
        inlineKeyboardButtonBot.setText(BOT_LABEL);

        inlineKeyboardButtonBot.setCallbackData(COMMANDS.BOT.getCommand());
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        keyboardButtons.add(Collections.singletonList(inlineKeyboardButtonBot));
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private SendMessage handleAccessCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        // –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if (ownerService.isUserExist(telegramUserId)) {
            message.setText("""
                    –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
                    """);
            message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
            return message;
        }
        // –µ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if (tempOwnerService.isUserExist(telegramUserId) && tempOwnerService.isDataComplete(telegramUserId)) {
            message.setText("""
                    –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...
                    """);
            message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
            return message;
        }
        message.setText("""
                –î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞</b>, <b>–∫–≤–∞—Ä—Ç–∏—Ä—ã</b> (–ø–æ—á—Ç–æ–≤—ã–π), –í–∞—à–µ <b>–∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º</b>, –í–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.
                –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Å–ø–∞–º–∞, –∞ —Ç–∞–∫–∂–µ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π, –í–∞–º –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–æ–º–∞ 44/2.
                <a href="http://563603-cd36585.tmweb.ru/privacy.pdf">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>                           
                ‚ùó –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–µ–∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π.
                """);
        message.enableHtml(true);
        message.disableWebPagePreview();
        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText(BEGIN_LABEL);

        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.BEGIN.getCommand());
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        keyboardButtons.add(Collections.singletonList(inlineKeyboardButtonBegin));
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private SendMessage handleAccessFloorCommand(String telegramUserId) {

        return SendMessage.builder().text("—ç—Ç–∞–∂").chatId(telegramUserId).replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build()).build();

    }

    private SendMessage handleAccessRoomCommand(String telegramUserId) {

        return SendMessage.builder().text("–∫–≤–∞—Ä—Ç–∏—Ä–∞").chatId(telegramUserId).replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build()).build();

    }

    private SendMessage handleAccessNameCommand(String telegramUserId) {

        return SendMessage.builder().text("–∏–º—è").chatId(telegramUserId).replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build()).build();

    }

    private SendMessage handleAccessPhoneExistCommand(String telegramUserId) {

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText("üõë –Ω–µ—Ç");
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.PHONE_NOT_EXIST.getCommand());

        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText("‚úÖÔ∏è –¥–∞");
        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.PHONE_EXIST.getCommand());

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonBegin);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        return SendMessage.builder().text("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω—É–∂–µ–Ω –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–ª—É—á–∞–µ –ß–ü, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º?").chatId(telegramUserId).replyMarkup(inlineKeyboardMarkup).build();

    }

    private SendMessage handleAccessPhoneCommand(String telegramUserId) {

        KeyboardButton keyboardButton = new KeyboardButton("""
                ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                (–±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
                """);
        keyboardButton.setRequestContact(true);
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow keyboardButtons = new KeyboardRow();
        keyboardButtons.add(keyboardButton);
        keyboard.add(keyboardButtons);
        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(false);
        replyKeyboardMarkup.setOneTimeKeyboard(true);

        return SendMessage.builder().text("—Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É) ‚¨áÔ∏è").chatId(telegramUserId).replyMarkup(replyKeyboardMarkup).build();

    }

    private SendMessage handleAccessCarExistCommand(String telegramUserId) {

        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText("–Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞");
        // –ø—É—Å—Ç–æ–µ –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ
        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.CAR_NOT_EXIST.getCommand());

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText("üöô –µ—Å—Ç—å");
        //–∑–∞–ø—Ä–æ—Å–∏–º –≤–≤–æ–¥ –ø–æ—Ç–æ–º, —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.CAR_EXIST.getCommand());

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonBegin);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        return SendMessage.builder().text("–ø–æ–∫—É–ø–∞–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ").chatId(telegramUserId).replyMarkup(inlineKeyboardMarkup).build();

    }

    private SendMessage handleAccessCarCommand(String telegramUserId) {

        return SendMessage.builder().text("–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞").chatId(telegramUserId).replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build()).build();

    }

    private SendMessage handleAccessBanCommand(String userId, String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(userId);
        if (getRole(telegramUserId).equals(Permission.ADMIN) || getRole(telegramUserId).equals(Permission.OWNER)) {
            try {
                BanChatMember banChatMember = new BanChatMember();
                banChatMember.setChatId(privateChannelId);
                banChatMember.setUserId(Long.valueOf(userId));
                execute(banChatMember);
                sendInfoToSupportAdmins(String.format("""
                        <a href="tg://user?id=%s">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω <a href="tg://user?id=%s">–∞–¥–º–∏–Ω–æ–º</a>, –æ–Ω –±–æ–ª–µ–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                        """, userId, telegramUserId), null);
                Owner owner = ownerService.getUser(userId);
                TempOwner tmpOwner = tempOwnerService.getUser(userId);
                tempOwnerService.delete(tmpOwner);
                owner.getApartmentList().clear();
                ownerService.delete(owner);
            } catch (TelegramApiException e) {
                try {
                    sendDebugToSupport("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω: " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
        }
        message.setText("‚ö†‚ö†‚ö† Ô∏è–ú—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –≤–∞—Å –∑–∞–±–∞–Ω–∏—Ç—å! –û—á–µ–Ω—å –∂–∞–ª—å.");
        return message;
    }

    private SendMessage handleAccessAddCommand(String userId, String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(userId);
        if (getRole(telegramUserId).equals(Permission.ADMIN) || getRole(telegramUserId).equals(Permission.OWNER)) {
            if (tempOwnerService.isUserExist(userId)) {
                try {
                    UnbanChatMember unbanChatMember = new UnbanChatMember();
                    unbanChatMember.setChatId(privateChannelId);
                    unbanChatMember.setOnlyIfBanned(true);
                    unbanChatMember.setUserId(Long.valueOf(userId));
                    execute(unbanChatMember);
                } catch (TelegramApiException e) {
                    try {
                        sendDebugToSupport("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω–∞: " + e.getMessage());
                    } catch (TelegramApiException ex) {
                        ex.printStackTrace();
                    }
                }
                sendInfoToUser(userId, String.format("""
                                            
                        –í–∞–º –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ 
                        ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è<a href="%s">–ó–î–ï–°–¨</a>‚¨ÖÔ∏è‚¨ÖÔ∏è‚¨ÖÔ∏è
                                                
                        """, getChatInviteLink()), null);
                message.setText(String.format("–í—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è <a href=\"tg://user?id=%s\">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>", userId));
                TempOwner tempOwner = tempOwnerService.getUser(userId);
                addOwnerToDb(tempOwner, telegramUserId);
            } else {
                message.setText(String.format("‚ö†Ô∏è–ü–æ—Ö–æ–∂–µ, –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞—è–≤–∫—É <a href=\"tg://user?id=%s\">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>", userId));
            }
        } else {
            message.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
        }
        return message;
    }

    private SendMessage handleSendToAdminCommand(String userId, String telegramUserId) throws TelegramApiException {
        TempOwner tmpOwner = tempOwnerService.getUser(telegramUserId);
        Apartment apartment = apartmentService.getApartment(tmpOwner.getRealNum());
        Apartment apartmentDDU = apartmentService.getApartmentDDU(tmpOwner.getRealNum());
        String owners = apartment.getOwnerList().size() > 0 ? apartment.getOwnerList().stream().map(item -> String.format("""
                <a href="tg://user?id=%s">%s</a>
                """, item.getTelegramId(), item.getName())).collect(joining(", ")) : "–ü–æ–∫–∞ –Ω–µ—Ç";
        SendMessage messageSuccess = new SendMessage();
        boolean addFlag = false;
        String status, dduStr = "";
        // TODO –∑–¥–µ—Å—å –≤–µ—Ç–∫–∞ –∞–≤—Ç–æ–∞–ø—Ä—É–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if (tmpOwner.getFloor().equals(apartment.getFloor()) && tmpOwner.getRealNum().equals(apartment.getId())) {
            messageSuccess.setText("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!");
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚úÖ–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏";
            sendInfoToUser(userId, String.format("""
                                
                    –í–∞–º –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ 
                    ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è<a href=\"%s\">–ó–î–ï–°–¨</a>‚¨ÖÔ∏è‚¨ÖÔ∏è‚¨ÖÔ∏è
                                
                    """, getChatInviteLink()), null);
            // –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –±–æ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ ID
            addOwnerToDb(tmpOwner, token.substring(0, token.indexOf(":")));
        } else {
            messageSuccess.setText("""
                    üéâ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...
                    –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–≤–µ—Ç—É –¥–æ–º–∞.
                    """);
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è ‚ùó–æ—Ç –ø–ª–∞–Ω–∞ –¥–æ–º–∞‚ùó";
            addFlag = true;
            dduStr = String.format("‚ùì–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –î–î–£: –ü–æ–¥—ä–µ–∑–¥: %s, –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s, –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –î–î–£: <b>%s</b>",
                    apartmentDDU.getEntrance(), apartmentDDU.getFloor(), apartmentDDU.getId(), apartmentDDU.getDduNum());
        }
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        messageSuccess.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        String phoneNum;
        if (!"".equals(tmpOwner.getPhoneNum())) {
            //–º–∞—Å–∫–∏—Ä—É–µ–º - –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
            phoneNum = tmpOwner.getPhoneNum().replaceAll("^(.{5}).{5}(.*)$", "$1***$2");
        } else {
            phoneNum = "–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω";
        }

        sendRequestToSupport(String.format("""
                                %s
                                Telegram –∞–∫–∫–∞—É–Ω—Ç: <a href="tg://user?id=%s">%s</a>
                                –ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s –¢–µ–ª–µ—Ñ–æ–Ω: %s –ú–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ: %s
                                --------------------            
                                –í –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ: –ü–æ–¥—ä–µ–∑–¥: %s, –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s, –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –î–î–£: %s
                                %s
                                –î—Ä—É–≥–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã: %s
                                üåè –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –∞–¥–º–∏–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞. –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –≤ —Ü–µ–ª—è—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
                                """,
                        status,
                        userId, tmpOwner.getName(),
                        tmpOwner.getFloor(), tmpOwner.getRealNum(), phoneNum, tmpOwner.getCarPlace(),
                        apartment.getEntrance(), apartment.getFloor(), apartment.getId(), apartment.getDduNum(),
                        dduStr,
                        owners),
                userId, addFlag);
        return messageSuccess;
    }

    private SendMessage handleDeleteDataCommand(String userId, String telegramUserId) throws TelegramApiException {
        TempOwner tmpOwner = tempOwnerService.getUser(telegramUserId);
        SendMessage messageSuccess = new SendMessage();
        tempOwnerService.delete(tmpOwner);
        messageSuccess.setText("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ");
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        messageSuccess.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return messageSuccess;
    }

    private SendMessage handleSuccessCommand(String userId) {
        SendMessage message = new SendMessage();
        TempOwner tmpOwner = tempOwnerService.getUser(userId);
        message.setText(String.format("""
                        –ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ. –í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
                                                
                        –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: <a href="tg://user?id=%s">%s</a>
                        –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s –¢–µ–ª–µ—Ñ–æ–Ω: %s –ú–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ: %s
                                                
                        –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ 
                        üö´–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.
                        –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ 
                        ‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 
                        """, userId, tmpOwner.getName(),
                tmpOwner.getFloor(), tmpOwner.getRealNum(), tmpOwner.getPhoneNum(), tmpOwner.getCarPlace()));
        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText(SEND_TO_ADMIN_LABEL);
        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.SEND.getCommand() + "/" + userId);

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText(SEND_TO_ADMIN_CANCEL_LABEL);
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.DELETE.getCommand());


        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.SEND.getCommand() + "/" + userId);
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonBegin);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private SendMessage handleAccessFindNeighborsCommand(String user, String telegramUserId) {
        if (!ownerService.isUserExist(telegramUserId)) {
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
            messageSuccess.setChatId(String.valueOf(telegramUserId));
            return messageSuccess;
        }
        SendMessage messageSuccess = new SendMessage();
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        messageSuccess.setText("–ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π —Å—Ä–µ–¥–∏ —Ç–µ—Ö –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton inlineKeyboardNeighbor2Button = new InlineKeyboardButton();
        inlineKeyboardNeighbor2Button.setText(FIND_NEIGHBOR2_LABEL);
        inlineKeyboardNeighbor2Button.setCallbackData(COMMANDS.FIND_2NEIGHBORS.getCommand());

        InlineKeyboardButton inlineKeyboardFloorButton = new InlineKeyboardButton();
        inlineKeyboardFloorButton.setText(FIND_FLOOR_NEIGHBOR_LABEL);
        inlineKeyboardFloorButton.setCallbackData(COMMANDS.FIND_FLOOR_NEIGHBORS.getCommand());

        InlineKeyboardButton inlineKeyboardEntranceButtonAbout = new InlineKeyboardButton();
        inlineKeyboardEntranceButtonAbout.setText(FIND_ENTRANCE_NEIGHBOR_LABEL);
        inlineKeyboardEntranceButtonAbout.setCallbackData(COMMANDS.FIND_ENTRANCE_NEIGHBORS.getCommand());

        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();

        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();

        keyboardButtonsRow1.add(inlineKeyboardNeighbor2Button);
        keyboardButtonsRow1.add(inlineKeyboardFloorButton);
        keyboardButtonsRow1.add(inlineKeyboardEntranceButtonAbout);
        keyboardButtons.add(keyboardButtonsRow1);
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);
        messageSuccess.setReplyMarkup(inlineKeyboardMarkup);
        return messageSuccess;
    }

    private SendMessage handleAccessFind2NeighborsCommand(String user, String telegramUserId) {
        if (!ownerService.isUserExist(telegramUserId)) {
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
            messageSuccess.setChatId(String.valueOf(telegramUserId));
            return messageSuccess;
        }
        SendMessage messageSuccess = new SendMessage();
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        StringBuilder sb = new StringBuilder();
        Owner owner = ownerService.getUser(telegramUserId);
        List<Apartment> apartmentList = owner.getApartmentList();
        apartmentList.forEach(ownerApartment -> {
            sb.append("\n–í–∞—à–∏ —Å–æ—Å–µ–¥–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ‚Ññ").append(ownerApartment.getId());
            // –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–æ–¥—ä–µ–∑–¥–µ –∏ –Ω–∞ —ç—Ç–∞–∂–µ
            List<Apartment> floorApartList = apartmentService.getFloorApartments(ownerApartment.getFloor(), ownerApartment.getEntrance());
            OptionalInt result = IntStream.range(0, floorApartList.size())
                    .filter(x -> ownerApartment.getId().equals(floorApartList.get(x).getId()))
                    .findFirst();
            Apartment apartmentLeft = null;
            Apartment apartmentRight = null;
            if (result.isPresent()) {
                int index = result.getAsInt();

                if (index - 1 >= 0) apartmentLeft = floorApartList.get(index - 1);
                if (index + 1 <= floorApartList.size() - 1) apartmentRight = floorApartList.get(index + 1);

                if (apartmentLeft != null)
                    sb.append("\n–°–æ—Å–µ–¥(–∏) –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Ññ").append(apartmentLeft.getId()).append(" ").append(apartmentLeft.getOwnerList().size() > 0 ? " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) " +
                            apartmentLeft.getOwnerList().stream().map(neighbor ->
                                    String.format("<a href=\"tg://user?id=%s\">%s</a>", neighbor.getTelegramId(), neighbor.getName())).collect(joining(","))
                            : " –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");
                if (apartmentRight != null)
                    sb.append("\n–°–æ—Å–µ–¥(–∏) –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Ññ").append(apartmentRight.getId()).append(" ").append(apartmentRight.getOwnerList().size() > 0 ? " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) " +
                            apartmentRight.getOwnerList().stream().map(neighbor ->
                                    String.format("<a href=\"tg://user?id=%s\">%s</a>", neighbor.getTelegramId(), neighbor.getName())).collect(joining(", "))
                            : " –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");
            } else {
                try {
                    sendDebugToSupport("–∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã " + ownerApartment.getRoom() + ", –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–∞–∂–µ");
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }
        });
        messageSuccess.enableHtml(true);
        messageSuccess.setText(sb.toString());
        return messageSuccess;
    }

    private SendMessage handleAccessFindEntranceNeighborsCommand(String user, String telegramUserId) {
        if (!ownerService.isUserExist(telegramUserId)) {
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
            messageSuccess.setChatId(String.valueOf(telegramUserId));
            return messageSuccess;
        }
        SendMessage messageSuccess = new SendMessage();
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        StringBuilder sb = new StringBuilder();
        Owner owner = ownerService.getUser(telegramUserId);
        List<Apartment> apartmentList = owner.getApartmentList();
        apartmentList.forEach(ownerApartment -> {
            sb.append("\n–í–∞—à–∏ —Å–æ—Å–µ–¥–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ‚Ññ").append(ownerApartment.getId()).append(" –∏ —Å—Ç–æ—è–∫—É");
            List<Apartment> floorApartList = apartmentService.getFloorApartments(ownerApartment.getFloor(), ownerApartment.getEntrance());
            // –∏–Ω–¥–µ–∫—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ —ç—Ç–∞–∂–µ
            OptionalInt result = IntStream.range(0, floorApartList.size())
                    .filter(x -> ownerApartment.getId().equals(floorApartList.get(x).getId()))
                    .findFirst();
            if (result.isPresent()) {
                int index = result.getAsInt();
                apartmentService.getEntranceFloors(ownerApartment.getEntrance()).forEach(floor -> {
                    List<Apartment> floorApartmentList = apartmentService.getFloorApartments(floor, ownerApartment.getEntrance());
                    try {
                        Apartment apartment = floorApartmentList.get(index);
                        if (ownerApartment.getFloor() != floor)
                            sb.append("\n–°–æ—Å–µ–¥(–∏) –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Ññ").append(apartment.getId()).append(" –∏ —ç—Ç–∞–∂–∞ ").append(floor).append(apartment.getOwnerList().size() > 0 ? " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) " +
                                    apartment.getOwnerList().stream().map(neighbor ->
                                            String.format("<a href=\"tg://user?id=%s\">%s</a>", neighbor.getTelegramId(), neighbor.getName())).collect(joining(", "))
                                    : " –Ω–µ—Ç –∏–Ω—Ñ.");
                        else {
                            sb.append("\n–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ ‚Ññ").append(ownerApartment.getId()).append(" –Ω–∞ —ç—Ç–∞–∂–µ ").append(ownerApartment.getFloor());
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        try {
                            sendDebugToSupport("–∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã " + ownerApartment.getRoom() + " –∏ —ç—Ç–∞–∂—É " + ownerApartment.getFloor() + ", –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É" + index);
                        } catch (TelegramApiException ex) {
                            ex.printStackTrace();
                        }
                        e.printStackTrace();
                    }
                });
            } else {
                try {
                    sendDebugToSupport("–∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å–æ—Å–µ–¥–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã " + ownerApartment.getRoom() + " –∏ —ç—Ç–∞–∂—É " + ownerApartment.getFloor() + ", –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–∞–∂–µ");
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }
        });
        messageSuccess.enableHtml(true);
        messageSuccess.setText(sb.toString());
        return messageSuccess;
    }

    private SendMessage handleAccessRemoveUserCommand(String userId, String telegramUserId) throws TelegramApiException {
        if (getRole(telegramUserId).equals(Permission.ADMIN) || getRole(telegramUserId).equals(Permission.OWNER)) {
            TempOwner tmpOwner = tempOwnerService.getUser(userId);
            tempOwnerService.delete(tmpOwner);
            sendInfoToUser(userId, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Å—á–∏—Ç–∞–ª, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã, –æ–Ω –º–æ–≥ <a href=\"https://2119.ru/upload/iblock/f28/%D0%A0%D0%B5%D0%B7%D1%83%D0%BB%D1%8C%D1%82%D0%B0%D1%82%D1%8B%20%D0%BE%D0%B1%D0%BC%D0%B5%D1%80%D0%BE%D0%B2_4%20%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C.pdf\">–∏–∑–º–µ–Ω–∏—Ç—å—Å—è</a>. –ù—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞.", null);
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω, –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
            messageSuccess.setReplyMarkup(getDefaultKeyboard(userId));
            return messageSuccess;
        } else {
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
            messageSuccess.setChatId(String.valueOf(userId));
            return messageSuccess;
        }
    }

    private SendMessage handleAccessFindFloorNeighborsCommand(String user, String telegramUserId) {
        if (!ownerService.isUserExist(telegramUserId)) {
            SendMessage messageSuccess = new SendMessage();
            messageSuccess.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
            messageSuccess.setChatId(String.valueOf(telegramUserId));
            return messageSuccess;
        }
        SendMessage messageSuccess = new SendMessage();
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        StringBuilder sb = new StringBuilder();
        Owner owner = ownerService.getUser(telegramUserId);
        List<Apartment> apartmentList = owner.getApartmentList();
        apartmentList.forEach(ownerApartment -> {
            sb.append("\n–í–∞—à–∏ —Å–æ—Å–µ–¥–∏ –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ ‚Ññ").append(ownerApartment.getId()).append(" –∏ —ç—Ç–∞–∂—É ").append(ownerApartment.getFloor());
            // –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ø–æ–¥—ä–µ–∑–¥–µ –∏ –Ω–∞ —ç—Ç–∞–∂–µ
            List<Apartment> floorApartList = apartmentService.getFloorApartments(ownerApartment.getFloor(), ownerApartment.getEntrance());
            floorApartList.forEach(apartment -> {
                        if (ownerApartment.getId() != apartment.getId())
                            sb.append("\n–°–æ—Å–µ–¥(–∏) –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Ññ").append(apartment.getId()).append(" ").append(apartment.getOwnerList().size() > 0 ? " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) " +
                                    apartment.getOwnerList().stream().map(neighbor ->
                                            String.format("<a href=\"tg://user?id=%s\">%s</a>", neighbor.getTelegramId(), neighbor.getName())).collect(joining(","))
                                    : " –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(—ã) —á–µ—Ä–µ–∑ –±–æ—Ç–∞.");
                    }
            );
        });
        messageSuccess.enableHtml(true);
        messageSuccess.setText(sb.toString());
        return messageSuccess;
    }

    private InlineKeyboardMarkup getDefaultKeyboard(String telegramUserId) throws TelegramApiException {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton inlineKeyboardHomeButton = new InlineKeyboardButton();
        inlineKeyboardHomeButton.setText(START_LABEL);
        inlineKeyboardHomeButton.setCallbackData(COMMANDS.START.getCommand());

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText(INFO_LABEL);
        inlineKeyboardButton.setCallbackData(COMMANDS.INFO.getCommand());

        InlineKeyboardButton inlineKeyboardButtonAbout = new InlineKeyboardButton();
        inlineKeyboardButtonAbout.setText(ABOUT_BUILDING_LABEL);
        inlineKeyboardButtonAbout.setCallbackData(COMMANDS.ABOUT_BUILDING.getCommand());

        InlineKeyboardButton inlineKeyboardButtonAccess = new InlineKeyboardButton();
        inlineKeyboardButtonAccess.setText(ACCESS_LABEL);
        inlineKeyboardButtonAccess.setCallbackData(COMMANDS.ACCESS.getCommand());

        InlineKeyboardButton inlineKeyboardButtonSearch = new InlineKeyboardButton();
        inlineKeyboardButtonSearch.setText(FIND_LABEL);
        inlineKeyboardButtonSearch.setCallbackData(COMMANDS.FIND_NEIGHBORS.getCommand());

        InlineKeyboardButton inlineKeyboardButtonBot2119 = new InlineKeyboardButton();
        inlineKeyboardButtonBot2119.setText(ABOUT_2119_LABEL);
        inlineKeyboardButtonBot2119.setUrl("https://t.me/Info_2119_bot");


        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();

        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();

        keyboardButtonsRow1.add(inlineKeyboardHomeButton);
        keyboardButtonsRow1.add(inlineKeyboardButton);

        List<InlineKeyboardButton> keyboardButtonsRow2 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonAbout);

        List<InlineKeyboardButton> keyboardButtonsRow3 = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow4 = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow5 = new ArrayList<>();

        keyboardButtonsRow5.add(inlineKeyboardButtonBot2119);

        keyboardButtons.add(keyboardButtonsRow1);
        keyboardButtons.add(keyboardButtonsRow2);
        keyboardButtons.add(keyboardButtonsRow3);
        keyboardButtons.add(keyboardButtonsRow4);
        keyboardButtons.add(keyboardButtonsRow5);

        // –µ—Å–ª–∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (!ownerService.isUserExist(telegramUserId))
            if (getRole(telegramUserId).equals(Permission.BANNED)) {
                InlineKeyboardButton bannedHomeButton = new InlineKeyboardButton();
                bannedHomeButton.setText("–û—á–µ–Ω—å –∂–∞–ª—å, –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã");
                bannedHomeButton.setCallbackData(COMMANDS.START.getCommand());
                keyboardButtonsRow3.add(bannedHomeButton);
            } else
                keyboardButtonsRow3.add(inlineKeyboardButtonAccess);
            // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        else {
            keyboardButtonsRow4.add(inlineKeyboardButtonSearch);
        }

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        return inlineKeyboardMarkup;
    }

    private Owner addOwnerToDb(TempOwner tmpOwner, String activatedBy) {
        Owner owner = new Owner();
        owner.setId(tmpOwner.getId());
        owner.setName(tmpOwner.getName());
        owner.setTelegramId(tmpOwner.getTelegramId());
        owner.setCarPlace(tmpOwner.getCarPlace());
        owner.setPhoneNum(tmpOwner.getPhoneNum());
        owner.setActivatedTelegramId(activatedBy);
        Apartment apartment = apartmentService.getApartment(tmpOwner.getRealNum());
        owner.getApartmentList().add(apartment);
        tempOwnerService.delete(tmpOwner);
        return ownerService.add(owner);
    }

    private Permission getRole(String telegramId) throws TelegramApiException {
        GetChatMember chatMember = new GetChatMember();
        chatMember.setChatId(privateChannelId);
        chatMember.setUserId(Long.parseLong(telegramId));
        ChatMember member = execute(chatMember);
        String status = member.getStatus();
        return switch (status) {
            case "creator" -> Permission.OWNER;
            case "administrator" -> Permission.ADMIN;
            case "kicked", "restricted" -> Permission.BANNED;
            default -> Permission.USER;
        };
    }

    /***
     * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–æ–≤-–∞–¥–º–∏–Ω–æ–≤
     * @param chatId
     * @return
     * @throws TelegramApiException
     */
    private List<ChatMember> getChatAdministrators(String chatId) throws TelegramApiException {
        GetChatAdministrators getChatAdministrators = new GetChatAdministrators();
        getChatAdministrators.setChatId(chatId);
        List<ChatMember> admins = execute(getChatAdministrators);
        Predicate<ChatMember> isQualified = item -> item.getUser().getIsBot();
        admins.removeIf(isQualified);
        return admins;
    }
}
