package com.almirus.kvartalyBot.service;

import com.almirus.kvartalyBot.dal.entity.Apartment;
import com.almirus.kvartalyBot.dal.entity.Owner;
import com.almirus.kvartalyBot.dal.entity.TempOwner;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.groupadministration.CreateChatInviteLink;
import org.telegram.telegrambots.meta.api.methods.groupadministration.UnbanChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.ChatInviteLink;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static java.util.stream.Collectors.joining;

@Component
@Data
@Slf4j
public class TelegramBotHandler extends TelegramLongPollingBot {

    private final String INFO_LABEL = "ü§ñ –û –±–æ—Ç–µ";
    private final String ACCESS_LABEL = "üîê –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø";
    private final String ABOUT_BUILDING_LABEL = "üè¢ –û –¥–æ–º–µ";
    private final String ABOUT_ROOM_LABEL = "üè† –û –∫–≤–∞—Ä—Ç–∏—Ä–µ";
    private final String BOT_LABEL = "–ß–µ–≥–æ –Ω–æ–≤–æ–≥–æ";
    private final String START_LABEL = "üè° –í –Ω–∞—á–∞–ª–æ";
    private final String BEGIN_LABEL = "–ù–∞—á–∞—Ç—å";
    private final String SEND_TO_ADMIN_LABEL = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
    private final String SEND_TO_ADMIN_CANCEL_LABEL = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É";
    // todo –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–≤–µ—Ä—Ö –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

    // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü
    private final TempOwnerService tempOwnerService;
    // —Ä–µ–∞–ª—å–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü
    private final OwnerService ownerService;

    private final ApartmentService apartmentService;


    private enum COMMANDS {
        ADD("/add"),
        REMOVE("/remove"),
        INFO("/info"),
        START("/start"),
        DEMO("/demo"),
        ACCESS("/access"),
        SUCCESS("/success"),
        ABOUT_ROOM("/about"),
        ABOUT_BUILDING("/about_building"),
        BOT("/bot"),
        BEGIN("/begin"),
        SEND("/send_to_admin"),
        DELETE("/delete"),
        CAR_EXIST("/car_exist"),
        CAR_NOT_EXIST("/car_not_exist");

        private String command;

        COMMANDS(String command) {
            this.command = command;
        }

        public String getCommand() {
            return command;
        }
    }

    @Value("${telegram.support.chat-id}")
    private String supportChatId;

    @Value("${telegram.name}")
    private String name;

    @Value("${telegram.token}")
    private String token;

    @Value("${telegram.chanel-id}")
    private String privateChannelId;

    @Override
    public String getBotUsername() {
        return name;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    public void onUpdateReceived(Update update) {
        //!update.getMessage().getChatId().equals(Long.parseLong(privateChannelId)) - –≤—ã–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —á–∞—Ç–µ, –Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if (update.hasMessage() && !update.getMessage().getChatId().equals(Long.parseLong(privateChannelId)) && (update.getMessage().hasText() || update.getMessage().hasContact())) { //—Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç –±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            String text = update.getMessage().hasText() ? update.getMessage().getText() : "";
            String reply = update.getMessage().getReplyToMessage() != null ? update.getMessage().getReplyToMessage().getText() : "";
            String phone = update.getMessage().hasContact() ? update.getMessage().getContact().getPhoneNumber() : "";
            long telegramUserId = update.getMessage().getChatId();

            try {
                //todo –ù—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥!
                Pattern patternFloor = Pattern.compile("^—ç—Ç–∞–∂$");
                Pattern patternRoom = Pattern.compile("^–∫–≤–∞—Ä—Ç–∏—Ä–∞$");
                Pattern patternName = Pattern.compile("^–∏–º—è$");
                Pattern patternPhone = Pattern.compile("^—Ç–µ–ª–µ—Ñ–æ–Ω$");
                Pattern patternCar = Pattern.compile("^–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞$");

                Matcher matcherFloor = patternFloor.matcher(reply);
                Matcher matcherRoom = patternRoom.matcher(reply);
                Matcher matcherName = patternName.matcher(reply);
                Matcher matcherPhone = patternPhone.matcher(reply);
                Matcher matcherCar = patternCar.matcher(reply);

                if (matcherFloor.find()) {
                    sendFloorInfo(Integer.parseInt(text), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessRoomCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherRoom.find()) {
                    sendRoomInfo(Integer.parseInt(text), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessNameCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherName.find()) {
                    sendNameInfo(!"".equals(text) ? text : update.getMessage().getFrom().getUserName(), String.valueOf(telegramUserId));
                    SendMessage message = handleAccessPhoneCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherPhone.find()) {
                    sendPhoneInfo(phone, String.valueOf(telegramUserId));
                    SendMessage message = handleAccessCarExistCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else if (matcherCar.find()) {
                    sendCarPlaceInfo(text, String.valueOf(telegramUserId));
                    SendMessage message = handleSuccessCommand(String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                } else {
                    SendMessage message = getCommandResponse(text, String.valueOf(telegramUserId), String.valueOf(telegramUserId));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(telegramUserId));
                    execute(message);
                }
            } catch (TelegramApiException e) {
                e.printStackTrace();

                try {
                    sendInfoToSupport("Error " + e.getMessage());


                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
        } else if (update.hasCallbackQuery() && !update.getCallbackQuery().getMessage().getChatId().equals(Long.parseLong(privateChannelId))) { //–Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            try {
                /*  command - –∫–æ–º–∞–Ω–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
                    telegramId - —Ç–µ–∫—É—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ç–æ –æ–±—â–∞–µ—Ç—Å—è —Å –±–æ—Ç–æ–º
                    forTelegramId - ID –Ω–∞–¥ –∫–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ
                 */
                Pattern commandPattern = Pattern.compile("(/[a-z_]+)/?(\\d+)?");
                Matcher matcherCommand = commandPattern.matcher(update.getCallbackQuery().getData());
                if (matcherCommand.find()) {
                    SendMessage message = getCommandResponse(matcherCommand.group(1), matcherCommand.group(2), String.valueOf(update.getCallbackQuery().getMessage().getChatId()));
                    message.enableHtml(true);
                    message.setParseMode(ParseMode.HTML);
                    message.setChatId(String.valueOf(update.getCallbackQuery().getMessage().getChatId()));
                    execute(message);
                }
            } catch (TelegramApiException e) {
                e.printStackTrace();
                try {
                    sendInfoToSupport("Error " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private boolean isAdmin(String telegramUserId) {
        return telegramUserId.equals(supportChatId);
    }


    // todo –ù—É–∂–µ–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    private void sendFloorInfo(Integer floor, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setFloor(floor);
        tempOwnerService.add(tmpOwner);

    }

    private void sendRoomInfo(Integer room, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setRealNum(room);
        tempOwnerService.add(tmpOwner);
    }

    private void sendNameInfo(String name, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setName(name);
        tempOwnerService.add(tmpOwner);
    }

    private void sendPhoneInfo(String phone, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setPhoneNum("+" + phone);
        tempOwnerService.add(tmpOwner);
    }

    private void sendCarPlaceInfo(String carPlace, String telegramUserId) {
        TempOwner tmpOwner;
        if (tempOwnerService.isUserExist(telegramUserId)) {
            tmpOwner = tempOwnerService.getUser(telegramUserId);
        } else {
            tmpOwner = new TempOwner();
            tmpOwner.setTelegramId(telegramUserId);
        }
        tmpOwner.setCarPlace(carPlace);
        tempOwnerService.add(tmpOwner);
    }


    private void sendRequestToSupport(String message, String userId) throws TelegramApiException {
        InlineKeyboardButton inlineKeyboardButtonApprove = new InlineKeyboardButton();
        inlineKeyboardButtonApprove.setText("‚úÖ –î–æ–±–∞–≤–∏—Ç—å");
        inlineKeyboardButtonApprove.setCallbackData(COMMANDS.ADD.getCommand() + "/" + userId);

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText("üö´ –û—Ç–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.DELETE.getCommand() + "/" + userId);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonApprove);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        SendMessage messageSupport = new SendMessage();
        messageSupport.setText(message);
        messageSupport.setChatId(supportChatId);
        messageSupport.enableHtml(true);
        messageSupport.setReplyMarkup(inlineKeyboardMarkup);
        execute(messageSupport);
    }

    private void sendInfoToUser(String telegramId, String message) throws TelegramApiException {
        SendMessage messageSupport = new SendMessage();
        messageSupport.setText(message);
        messageSupport.setChatId(telegramId);
        messageSupport.enableHtml(true);
        execute(messageSupport);
    }

    private void sendInfoToSupport(String message) throws TelegramApiException {
        sendInfoToUser(supportChatId, message);
    }

    private SendMessage getCommandResponse(String text, String user, String telegramUserId) throws TelegramApiException {

        if (text.equals(COMMANDS.INFO.getCommand())) {
            return handleInfoCommand();
        }

        if (text.equals(COMMANDS.ACCESS.getCommand())) {
            return handleAccessCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.START.getCommand())) {
            return handleStartCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.ABOUT_ROOM.getCommand())) {
            return handleAboutRoomCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.ABOUT_BUILDING.getCommand())) {
            return handleAboutBuildingCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.BOT.getCommand())) {
            return handleBotCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.BEGIN.getCommand())) {
            return handleAccessFloorCommand(telegramUserId);
        }

        if (text.equals(COMMANDS.SEND.getCommand())) {
            return handleSendToAdminCommand(user, telegramUserId);
        }
        if (text.equals(COMMANDS.DELETE.getCommand())) {
            return handleDeleteDataCommand(user, telegramUserId);
        }
        if (text.equals(COMMANDS.CAR_NOT_EXIST.getCommand())) {
            sendCarPlaceInfo("–ù–µ—Ç", String.valueOf(telegramUserId));
            return handleSuccessCommand(String.valueOf(telegramUserId));
        }
        if (text.equals(COMMANDS.CAR_EXIST.getCommand())) {
            return handleAccessCarCommand(telegramUserId);
        }
        if (text.equals(COMMANDS.ADD.getCommand())) {
            return handleAccessAddCommand(user, telegramUserId);
        }
        if (text.equals(COMMANDS.REMOVE.getCommand())) {
            return handleAccessCarCommand(telegramUserId);
        }
        return handleNotFoundCommand(telegramUserId);
    }

    private SendMessage handleNotFoundCommand(String telegramUserId) {
        SendMessage message = new SendMessage();
        message.setText("–í—ã —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:");
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private String getChatInviteLink() throws TelegramApiException {
        CreateChatInviteLink createChatInviteLink = new CreateChatInviteLink();
        createChatInviteLink.setChatId(privateChannelId);
        createChatInviteLink.setMemberLimit(1);
        ChatInviteLink chatInviteLink = execute(createChatInviteLink);
        return chatInviteLink.getInviteLink();
    }

    private SendMessage handleAboutRoomCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();

        if (ownerService.isUserExist(telegramUserId)) {

            Owner user = ownerService.getUser(telegramUserId);
            String userStr = String.format("""
                            üë§   –õ–æ–≥–∏–Ω/–ò–º—è: <b>%s</b>
                            ‚òé   –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b><a href="tel:%s">%s</a></b>
                            """,
                    user.getName(), user.getPhoneNum(), user.getPhoneNum());

            String apartStr = user.getApartmentList().stream().map(item ->
                    String.format("""
                                    –ù–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞: <b>%s</b>
                                    –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞: <b>%s</b>
                                    –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: <b>%s</b>, –ø–æ –î–î–£: <b>%s</b>
                                    –ö–æ–º–Ω–∞—Ç: <b>%s</b>
                                    –ü–ª–æ—â–∞–¥—å –ø–æ –ë–¢–ò: <b>%s</b>, —Ä–∞–∑–Ω–∏—Ü–∞ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º: <b>%s–º2</b>
                                    """,
                            item.getEntrance(), item.getFloor(), item.getId(), item.getDduNum(), item.getRoom(), item.getRealArea(), item.getDifference())
            ).collect(joining("\n"));

            message.setText(userStr + apartStr);

        } else {
            message.setText("–Ø –≤–∞—Å –Ω–µ –Ω–∞—à–µ–ª, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø");
        }
        message.enableHtml(true);
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));

        return message;
    }

    private SendMessage handleAboutBuildingCommand(String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        String info = """
                –ù–∞—à –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É <a href="https://yandex.ru/maps/-/CCUujETt~B">2-–π –ì—Ä–∞–π–≤–æ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä-–¥. –¥44.–∫.2</a>
                –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è <a href="https://2119.ru/about/docs/">—Ç—É—Ç</a>
                –î–æ–º –∏–º–µ–µ—Ç 11 –ø–æ–¥—ä–µ–∑–¥–æ–≤, –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è, —ç—Ç–æ –æ–¥–∏–Ω –¥–æ–º –∏ –∏–º–µ–µ—Ç –æ–¥–∏–Ω –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å.
                 """;
        message.setText(info);
        message.enableHtml(true);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        List<List<InlineKeyboardButton>> keyboardButtons = getDefaultKeyboard(telegramUserId).getKeyboard();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();

        InlineKeyboardButton inlineKeyboardButtonRoom = new InlineKeyboardButton();
        inlineKeyboardButtonRoom.setText(ABOUT_ROOM_LABEL);
        inlineKeyboardButtonRoom.setCallbackData(COMMANDS.ABOUT_ROOM.getCommand());
        keyboardButtonsRow1.add(inlineKeyboardButtonRoom);
        keyboardButtons.add(keyboardButtonsRow1);
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);
        message.setReplyMarkup(inlineKeyboardMarkup);

        return message;
    }

    private SendMessage handleBotCommand(String telegramUserId) {
        SendMessage message = new SendMessage();
        message.setText("""
                ‚ú® –ë–æ—Ç —É–º–µ–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                ‚ú® –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞
                ‚ú® –ü—Ä–∏–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫
                """);
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private SendMessage handleStartCommand(String telegramUserId) {
        SendMessage message = new SendMessage();
        message.setText("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return message;
    }

    private SendMessage handleInfoCommand() {
        SendMessage message = new SendMessage();
        message.setText("""
                –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏—Ö —Å–æ—Å–µ–¥–µ–π –ø–æ —ç—Ç–∞–∂—É –∏ —Å—Ç–æ—è–∫—É, –∞ —Ç–∞–∫–∂–µ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É.
                –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è!
                –í–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è, –¥–æ–Ω–∞—Ç—ã ü•Ø @<a href="tg://user?id=153968771">Almirus</a>
                """);
        message.enableHtml(true);
        InlineKeyboardButton inlineKeyboardButtonBot = new InlineKeyboardButton();
        inlineKeyboardButtonBot.setText(BOT_LABEL);

        inlineKeyboardButtonBot.setCallbackData(COMMANDS.BOT.getCommand());
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        keyboardButtons.add(Collections.singletonList(inlineKeyboardButtonBot));
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private SendMessage handleAccessCommand(String telegramUserId) {
        SendMessage message = new SendMessage();
        // –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if (ownerService.isUserExist(telegramUserId)) {
            message.setText("""
                    –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.
                    """);
            message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
            return message;
        }
        // –µ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if (tempOwnerService.isUserExist(telegramUserId) && tempOwnerService.isDataComplete(telegramUserId)) {
            message.setText("""
                    –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...
                    """);
            message.setReplyMarkup(getDefaultKeyboard(telegramUserId));
            return message;
        }
        message.setText("""
                –î–∞–ª–µ–µ —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä <b>—ç—Ç–∞–∂–∞</b>, <b>–∫–≤–∞—Ä—Ç–∏—Ä—ã</b>, <b>–≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º</b>, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–Ω–æ –æ—á–µ–Ω—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ <b>–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω</b>).
                –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã —á—Ç–æ–±—ã –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Å–ø–∞–º–∞, –∞ —Ç–∞–∫–∂–µ –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–æ–º–∞.
                """);
        message.enableHtml(true);
        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText(BEGIN_LABEL);

        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.BEGIN.getCommand());
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        keyboardButtons.add(Collections.singletonList(inlineKeyboardButtonBegin));
        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private SendMessage handleAccessFloorCommand(String telegramUserId) {

        return SendMessage.builder()
                .text("—ç—Ç–∞–∂")
                .chatId(telegramUserId)
                .replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build())
                .build();

    }

    private SendMessage handleAccessRoomCommand(String telegramUserId) {

        return SendMessage.builder()
                .text("–∫–≤–∞—Ä—Ç–∏—Ä–∞")
                .chatId(telegramUserId)
                .replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build())
                .build();

    }

    private SendMessage handleAccessNameCommand(String telegramUserId) {

        return SendMessage.builder()
                .text("–∏–º—è")
                .chatId(telegramUserId)
                .replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build())
                .build();

    }

    private SendMessage handleAccessPhoneCommand(String telegramUserId) {

        KeyboardButton keyboardButton = new KeyboardButton("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        keyboardButton.setRequestContact(true);
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow keyboardButtons = new KeyboardRow();
        keyboardButtons.add(keyboardButton);
        keyboard.add(keyboardButtons);
        replyKeyboardMarkup.setKeyboard(keyboard);
        replyKeyboardMarkup.setResizeKeyboard(false);
        replyKeyboardMarkup.setOneTimeKeyboard(true);

        return SendMessage.builder()
                .text("—Ç–µ–ª–µ—Ñ–æ–Ω")
                .chatId(telegramUserId)
                .replyMarkup(replyKeyboardMarkup)
                .build();

    }

    private SendMessage handleAccessCarExistCommand(String telegramUserId) {

        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText("–Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞");
        // –ø—É—Å—Ç–æ–µ –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ
        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.CAR_NOT_EXIST.getCommand());

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText("üöô –µ—Å—Ç—å");
        //–∑–∞–ø—Ä–æ—Å–∏–º –≤–≤–æ–¥ –ø–æ—Ç–æ–º, —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.CAR_EXIST.getCommand());

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonBegin);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        return SendMessage.builder()
                .text("–ø–æ–∫—É–ø–∞–ª–∏ –º–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ")
                .chatId(telegramUserId)
                .replyMarkup(inlineKeyboardMarkup)
                .build();

    }

    private SendMessage handleAccessCarCommand(String telegramUserId) {

        return SendMessage.builder()
                .text("–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω–æ–º–µ—Å—Ç–∞")
                .chatId(telegramUserId)
                .replyMarkup(ForceReplyKeyboard.builder().forceReply(true).build())
                .build();

    }

    private SendMessage handleAccessAddCommand(String userId, String telegramUserId) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(userId);
        if (isAdmin(telegramUserId)) {
            try {
                UnbanChatMember unbanChatMember = new UnbanChatMember();
                unbanChatMember.setChatId(privateChannelId);
                unbanChatMember.setOnlyIfBanned(true);
                unbanChatMember.setUserId(Long.valueOf(userId));
                execute(unbanChatMember);
            } catch (TelegramApiException e) {
                try {
                    sendInfoToSupport("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω–∞: " + e.getMessage());
                } catch (TelegramApiException ex) {
                    ex.printStackTrace();
                }
            }
            sendInfoToUser(userId, "–í–∞–º –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å: " + getChatInviteLink());
            message.setText(String.format("–í—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è <a href=\"tg://user?id=%s\">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>", userId));
            TempOwner tempOwner = tempOwnerService.getUser(userId);
            addOwnerToDb(tempOwner, telegramUserId);
        } else {
            message.setText("‚ö†Ô∏è–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É!");
        }
        return message;
    }

    private SendMessage handleSendToAdminCommand(String userId, String telegramUserId) throws TelegramApiException {
        TempOwner tmpOwner = tempOwnerService.getUser(telegramUserId);
        Apartment apartment = apartmentService.getApartment(tmpOwner.getRealNum());
        String owners = apartment.getOwnerList().size() > 0 ? apartment.getOwnerList().stream().map(item ->
                String.format("""
                                <a href="tg://user?id=%s">%s</a>
                                """,
                        item.getTelegramId(), item.getName())
        ).collect(joining(", ")) : "–ü–æ–∫–∞ –Ω–µ—Ç";
        SendMessage messageSuccess = new SendMessage();
        String status;
        // TODO –∑–¥–µ—Å—å –≤–µ—Ç–∫–∞ –∞–≤—Ç–æ–∞–ø—Ä—É–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if (tmpOwner.getFloor().equals(apartment.getFloor()) && tmpOwner.getRealNum().equals(apartment.getId())) {
            messageSuccess.setText("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!");
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏";
            sendInfoToUser(userId, "–í–∞–º –≤—ã–¥–∞–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å: " + getChatInviteLink());
            // –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –±–æ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ ID
            addOwnerToDb(tmpOwner, token.substring(0, token.indexOf(":")));
        } else {
            messageSuccess.setText("üéâ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...");
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø";
        }
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        messageSuccess.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        sendRequestToSupport(String.format("""
                        %s
                        Telegram –∞–∫–∫–∞—É–Ω—Ç: <a href="tg://user?id=%s">%s</a>
                        –ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s –¢–µ–ª–µ—Ñ–æ–Ω: %s –ú–∞—à–∏–Ω–æ–º–µ—Å—Ç–æ: %s
                        --------------------             
                        –í –Ω–∞—à–µ–π –±–∞–∑–µ –ø–æ —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ: –≠—Ç–∞–∂: %s –ö–≤–∞—Ä—Ç–∏—Ä–∞: %s, –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –î–î–£: %s
                        –î—Ä—É–≥–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã: %s
                        """, status,
                userId, tmpOwner.getName(), tmpOwner.getFloor(), tmpOwner.getRealNum(), tmpOwner.getPhoneNum(), tmpOwner.getCarPlace(),
                apartment.getFloor(), apartment.getId(), apartment.getDduNum(),
                owners), userId);
        return messageSuccess;
    }

    private SendMessage handleDeleteDataCommand(String userId, String telegramUserId) throws TelegramApiException {
        TempOwner tmpOwner = tempOwnerService.getUser(telegramUserId);
        SendMessage messageSuccess = new SendMessage();
        tempOwnerService.delete(tmpOwner);
        messageSuccess.setText("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ");
        messageSuccess.setChatId(String.valueOf(telegramUserId));
        messageSuccess.setReplyMarkup(getDefaultKeyboard(telegramUserId));
        return messageSuccess;
    }

    private SendMessage handleSuccessCommand(String userId) {
        SendMessage message = new SendMessage();
        message.setText("–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ");
        InlineKeyboardButton inlineKeyboardButtonBegin = new InlineKeyboardButton();
        inlineKeyboardButtonBegin.setText(SEND_TO_ADMIN_LABEL);
        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.SEND.getCommand() + "/" + userId);

        InlineKeyboardButton inlineKeyboardButtonCancel = new InlineKeyboardButton();
        inlineKeyboardButtonCancel.setText(SEND_TO_ADMIN_CANCEL_LABEL);
        inlineKeyboardButtonCancel.setCallbackData(COMMANDS.DELETE.getCommand());


        inlineKeyboardButtonBegin.setCallbackData(COMMANDS.SEND.getCommand() + "/" + userId);
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();
        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonBegin);
        keyboardButtonsRow1.add(inlineKeyboardButtonCancel);

        keyboardButtons.add(keyboardButtonsRow1);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    private InlineKeyboardMarkup getDefaultKeyboard(String telegramUserId) {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

        InlineKeyboardButton inlineKeyboardHomeButton = new InlineKeyboardButton();
        inlineKeyboardHomeButton.setText(START_LABEL);
        inlineKeyboardHomeButton.setCallbackData(COMMANDS.START.getCommand());

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText(INFO_LABEL);
        inlineKeyboardButton.setCallbackData(COMMANDS.INFO.getCommand());

        InlineKeyboardButton inlineKeyboardButtonAbout = new InlineKeyboardButton();
        inlineKeyboardButtonAbout.setText(ABOUT_BUILDING_LABEL);
        inlineKeyboardButtonAbout.setCallbackData(COMMANDS.ABOUT_BUILDING.getCommand());

        InlineKeyboardButton inlineKeyboardButtonAccess = new InlineKeyboardButton();
        inlineKeyboardButtonAccess.setText(ACCESS_LABEL);
        inlineKeyboardButtonAccess.setCallbackData(COMMANDS.ACCESS.getCommand());

        List<List<InlineKeyboardButton>> keyboardButtons = new ArrayList<>();

        List<InlineKeyboardButton> keyboardButtonsRow1 = new ArrayList<>();

        keyboardButtonsRow1.add(inlineKeyboardHomeButton);
        keyboardButtonsRow1.add(inlineKeyboardButton);

        List<InlineKeyboardButton> keyboardButtonsRow2 = new ArrayList<>();
        keyboardButtonsRow1.add(inlineKeyboardButtonAbout);

        List<InlineKeyboardButton> keyboardButtonsRow3 = new ArrayList<>();
        if (!ownerService.isUserExist(telegramUserId)) keyboardButtonsRow3.add(inlineKeyboardButtonAccess);

        keyboardButtons.add(keyboardButtonsRow1);
        keyboardButtons.add(keyboardButtonsRow2);
        keyboardButtons.add(keyboardButtonsRow3);

        inlineKeyboardMarkup.setKeyboard(keyboardButtons);

        return inlineKeyboardMarkup;
    }

    private Owner addOwnerToDb(TempOwner tmpOwner, String activatedBy) {
        Owner owner = new Owner();
        owner.setId(tmpOwner.getId());
        owner.setName(tmpOwner.getName());
        owner.setTelegramId(tmpOwner.getTelegramId());
        owner.setCarPlace(tmpOwner.getCarPlace());
        owner.setPhoneNum(tmpOwner.getPhoneNum());
        owner.setActivatedTelegramId(activatedBy);
        Apartment apartment = apartmentService.getApartment(tmpOwner.getRealNum());
        owner.getApartmentList().add(apartment);
        tempOwnerService.delete(tmpOwner);
        return ownerService.add(owner);
    }

}
